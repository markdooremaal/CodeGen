openapi: 3.0.0
servers:
  - url: localhost:8080
info:
  description: This is the API for the 2.4 Code Generation Bank application
  version: "2.0.1"
  title: Bank API
paths:
  /login:
    post:
      tags:
        - Auth
      summary: Logs the user in.
      requestBody:
        description: Username and password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@gmail.com
                password:
                  type: string
                  format: password
                  example: goedwachtwoord2!
      operationId: login
      description: Create a token for the given username and password. Which the client can than use to access the protected api endpoints.
      responses:
        "200":
          description: The user is logged in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: byte
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
        "400":
          description: bad input parameter

  /transactions:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Transactions and Transfers
      summary: Get all Transactions, with the option to filter.
      parameters:
        - in: query
          name: userId
          description: Get all the transactions for a specific user
          schema:
            type: integer
        - in: query
          name: ibanFrom
          schema:
            type: string
            pattern: ^[a-z]{2}[0-9]{2}[a-z0-9]{4}[0-9]{7}([a-z0-9]?){0,16}$
        - in: query
          name: ibanTo
          schema:
            type: string
            pattern: ^[a-z]{2}[0-9]{2}[a-z0-9]{4}[0-9]{7}([a-z0-9]?){0,16}$
        - in: query
          name: userPerforming
          schema:
            type: integer
        - in: query
          name: timestamp
          schema:
            type: string
            format: date-time
        - in: query
          name: ibanToOrFrom
          schema:
            type: string
            pattern: ^[a-z]{2}[0-9]{2}[a-z0-9]{4}[0-9]{7}([a-z0-9]?){0,16}$
      operationId: getAllTransactions
      description: Calling this allows you to fetch all transactions. Apply query's to filter results.
      responses:
        "200":
          description: Array of relevant transactions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfTransactions"
        "400":
          description: bad input parameter
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Transactions and Transfers
      summary: Create a new transaction
      requestBody:
        description: Transaction object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transaction"
      operationId: createTransaction
      description: Calling this allows you to create a transaction
      responses:
        "200":
          description: The transaction is made
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: bad input parameter

  /transaction/{id}:
    get:
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the transaction to get
      tags:
        - Transactions and Transfers
      summary: Get a transaction by id
      operationId: getTransactionById
      description: Calling this allows you to fetch a specific transaction by id
      responses:
        "200":
          description: the transaction
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: bad input parameter

  /transfers:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Transactions and Transfers
      summary: Get all transfers, with the option to filter.
      parameters:
        - in: query
          name: userId
          description: Get all the transfers for a specific user
          schema:
            type: integer
        - in: query
          name: account
          schema:
            type: string
            pattern: ^[a-z]{2}[0-9]{2}[a-z0-9]{4}[0-9]{7}([a-z0-9]?){0,16}$
        - in: query
          name: type
          schema:
            type: string
            enum:
              - deposit
              - withdrawal
        - in: query
          name: userPerforming
          schema:
            type: integer
        - in: query
          name: timestamp
          schema:
            type: string
            format: date-time
      operationId: getAllTransfers
      description: Calling this allows you to fetch all transfers. Apply query's to filter results.
      responses:
        "200":
          description: Array of relevant transfers
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfTransfers"
        "400":
          description: bad input parameter
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Transactions and Transfers
      summary: Create a new transfer
      requestBody:
        description: Transfer object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transfer"
      operationId: createTransfer
      description: Calling this allows you to create a transfer
      responses:
        "200":
          description: The transfer is made
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transfer"
        "400":
          description: bad input parameter

  /transfer/{id}:
    get:
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the transfer to get
      tags:
        - Transactions and Transfers
      summary: Get a transfer by id
      operationId: getTransferById
      description: Calling this allows you to fetch a specific transfer by id
      responses:
        "200":
          description: the transfer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transfer"
        "400":
          description: bad input parameter

  /users:
    get:
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: name
          description: first-/lastname or both
          schema:
            type: string
        - in: query
          name: email
          schema:
            type: string
            format: email
        - in: query
          name: role
          schema:
            type: string
            enum:
              - Customer
              - Employee
        - in: query
          name: status
          schema:
            type: string
            enum:
              - Active
              - Inactive
      tags:
        - Users
      summary: Get all Users, with the option to filter.
      operationId: getAllUsers
      description: Calling this allows you to fetch all users. Apply query's to filter results.
      responses:
        "200":
          description: The users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfUsers"
        "400":
          description: bad input parameter
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Users
      summary: Create new user
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      operationId: createUser
      description: Calling this allows you to create a new user
      responses:
        "200":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: bad input parameter

  /user/{id}:
    get:
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to get
      tags:
        - Users
      summary: Get a user by id
      operationId: getUserById
      description: Calling this allows you to fetch a specific user by id
      responses:
        "200":
          description: the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: bad input parameter
    put:
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to update
      tags:
        - Users
      summary: Update a user
      requestBody:
        description: User object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      operationId: updateUser
      description: Calling this allows you to update a user
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: bad input parameter
    delete:
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to make inactive
      tags:
        - Users
      summary: Makes a user inactive
      operationId: makeUserInactive
      description: Calling this allows you to make a user inactive
      responses:
        "200":
          description: User is now inactive
        "400":
          description: bad input parameter

  /bankaccounts:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Accounts
      summary: Get all Bank Accounts
      parameters:
        - in: query
          name: userId
          description: Get all the accounts for a specific user
          schema:
            type: integer
      operationId: getAllAccounts
      description: Calling this allows you to fetch all Bank Accounts
      responses:
        "200":
          description: The Bank Accounts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ArrayOfBankAccounts"
        "400":
          description: bad input parameter
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Accounts
      summary: Create a new BankAccount
      requestBody:
        description: Transaction object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankAccount"
      operationId: createAccount
      description: Calling this allows you to create a sBank Account
      responses:
        "200":
          description: Account created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
        "400":
          description: bad input parameter

  /bankaccount/{id}:
    get:
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: IBAN of the Bank Account to get
      tags:
        - Accounts
      summary: Get a Bank Account by IBAN
      operationId: getAccountById
      description: Calling this allows you to fetch a specific Bank Account by id
      responses:
        "200":
          description: the Bank Account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
        "400":
          description: bad input parameter
    put:
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: IBAN of the Bank Account to update
      tags:
        - Accounts
      summary: Update a Bank Account by IBAN
      requestBody:
        description: BankAccount object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BankAccount"
      operationId: updateAccountById
      description: Calling this allows you to update a specific Bank Account by id
      responses:
        "200":
          description: Account updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BankAccount"
        "400":
          description: bad input parameter
    delete:
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: IBAN of the Bank Account to close
      tags:
        - Accounts
      summary: Closes a Bank Account by IBAN
      operationId: closeAccountById
      description: Calling this allows you to close a specific Bank Account by id
      responses:
        "200":
          description: The Bank account will be closed
        "400":
          description: bad input parameter

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    Transaction:
      type: object
      required:
        - accountFrom
        - accountTo
        - userPerforming # Can be set based on Bearer-Token
        - amount
      properties:
        id:
          description: Unique transaction id
          type: integer
          example: 1
        accountFrom:
          description: Sending account
          type: string
          pattern: ^[a-z]{2}[0-9]{2}[a-z0-9]{4}[0-9]{7}([a-z0-9]?){0,16}$
          example: NL01INHO0000000001
        accountTo:
          description: Receiving account
          type: string
          pattern: ^[a-z]{2}[0-9]{2}[a-z0-9]{4}[0-9]{7}([a-z0-9]?){0,16}$
          example: NL01INHO0000000002
        userPerforming:
          description: Id of user performing the transaction
          type: integer
          example: 1
        amount:
          description: The amount of money
          type: number
          format: double
          example: 13.37
        timestamp:
          description: Date and time of the transaction
          type: string
          format: date-time
          example: 01-02-2021 12:06:03

    BankAccount:
      type: object
      required:
        - userId
        - type
        - status
        - absoluteLimit
      properties:
        iban:
          description: The unique identifier for the account
          type: string
          pattern: ^[a-z]{2}[0-9]{2}[a-z0-9]{4}[0-9]{7}([a-z0-9]?){0,16}$
          example: NL01INHO0000000001
        userId:
          description: Owner of the bank account
          type: integer
          example: 1
        Status:
          description: Account status
          type: string
          enum: [ active, inactive ]
          example: active
        type:
          description: Account type
          type: string
          enum: [ regular, savings ]
          example: regular
        balance:
          description: The ammount of money on the account
          type: number
          format: double
          example: 500.50
        absoluteLimit:
          description: The absolute minimum of the account
          type: number
          format: double
          example: -1000

    Transfer:
      type: object
      required:
        - account
        - type
        - amount
        - userPerforming
      properties:
        id:
          description: Unique transfer id
          type: integer
          example: 1
        account:
          description: The unique identifier for the account
          type: string
          pattern: ^[a-z]{2}[0-9]{2}[a-z0-9]{4}[0-9]{7}([a-z0-9]?){0,16}$
          example: NL01INHO0000000001
        type:
          description: Transfer type
          type: string
          enum: [ deposit, withdrawal ]
          example: deposit
        amount:
          description: The amount of money
          type: number
          format: double
          example: 10.42
        userPerforming:
          description: The user performing the transfer
          type: integer
          example: 1
        timestamp:
          description: Date and time of the transfer
          type: string
          format: date-time
          example: 01-02-2021 12:06:03

    User:
      type: object
      required:
        - firstName
        - lastName
        - email
        - password
        - status
        - dayLimit
        - transactionLimit
      properties:
        id:
          description: Unique user id
          type: integer
          example: 1
        firstName:
          description: Users firstname
          type: string
          example: John
        lastName:
          description: Users lastname
          type: string
          example: Doe
        email:
          description: Users email
          type: string
          format: email
          example: johndoe@example.dev
        password:
          description: Users password
          type: string
          format: password
          example: goedWachtwoord94!
        role:
          description: Users role
          type: string
          enum: [ customer, employee ]
          example: customer
        status:
          description: Users status
          type: string
          enum: [ active, inactive ]
          example: active
        dayLimit:
          description: The max spending for the user per day
          type: number
          format: double
          example: 499.90
        transactionLimit:
          description: The max spending for the user
          type: number
          format: double
          example: 499.90
        bankAccounts:
          description: The users bank accounts
          type: array
          items:
            $ref: "#/components/schemas/BankAccount"

    ArrayOfTransactions:
      type: array
      items:
        $ref: "#/components/schemas/Transaction"

    ArrayOfBankAccounts:
      type: array
      items:
        $ref: "#/components/schemas/BankAccount"

    ArrayOfTransfers:
      type: array
      items:
        $ref: "#/components/schemas/Transfer"

    ArrayOfUsers:
      type: array
      items:
        $ref: "#/components/schemas/User"


